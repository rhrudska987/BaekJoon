package DynamicProgramming;

import java.util.LinkedList;
import java.util.Queue;

public class 게임_맵_최단거리 {

	 static class Solution {
		public int solution(int[][] maps) {
			int answer = Integer.MAX_VALUE;
			int[] dx = {-1, 0, 1, 0};
			int[] dy = {0, -1, 0, 1};
			boolean visited[][] = new boolean[maps.length][maps[0].length];

			Queue<Location> queue = new LinkedList<>();
			queue.add(new Location(0, 0, 1));
			visited[0][0] = true;

			while (!queue.isEmpty()) {
				Location location = queue.poll();
				if (location.x == maps[0].length - 1 && location.y == maps.length - 1) {
					answer = Math.min(answer, location.distance);
				}

				for(int i=0; i<4; i++) {
					int nextX = location.x + dx[i];
					int nextY = location.y + dy[i];
					int distance  = location.distance;
					if (nextX < 0 || nextX >= maps[0].length || nextY < 0 || nextY >= maps.length || visited[nextY][nextX] || maps[nextY][nextX] == 0) {
						continue;
					}
					queue.add(new Location(nextX, nextY, distance + 1));
					visited[nextY][nextX] = true;
				}
			}

			if (answer == Integer.MAX_VALUE) {
				return -1;
			}
			return answer;
		}

		static class Location {
			int x;
			int y;
			int distance;
			public Location (int x, int y, int distance) {
				this.x = x;
				this.y = y;
				this.distance = distance;
			}
		}
	}

	public static void main(String[] args) {
		 Solution so = new Solution();
		 int[][] maps1 = {{1,0,1,1,1},{1,0,1,0,1},{1,0,1,1,1},{1,1,1,0,1},{0,0,0,0,1}};
		 int[][] maps2 = {{1,0,1,1,1},{1,0,1,0,1},{1,0,1,1,1},{1,1,1,0,0},{0,0,0,0,1}};
		System.out.println(so.solution(maps1));
		System.out.println(so.solution(maps2));
	}

}
