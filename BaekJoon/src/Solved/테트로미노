package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 테트로미노 {

    static int max = Integer.MIN_VALUE;
    static int N, M;
    static int map[][];
    static boolean visit[][];

    static int[] dx = {-1,1,0,0};
    static int[] dy = {0,0,-1,1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        visit = new boolean[N][M];

        for (int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<M; j++)
                map[i][j] = Integer.parseInt(st.nextToken());
        }

        for (int i=0; i<N; i++){
            for (int j=0; j<M; j++){
                visit[i][j] = true;
                DFS(i, j, map[i][j], 1);
                visit[i][j] = false;
            }
        }
        System.out.println(max);
    }

    static void DFS(int y, int x, int sum, int cnt) {
        if(cnt == 4){
            max = Math.max(max, sum);
            return;
        }

        for (int i=0; i<4; i++){
            int curY = y + dy[i];
            int curX = x + dx[i];

            if(curY < 0 || curY >= N || curX < 0 || curX >= M)
                continue;

            if(!visit[curY][curX]){
                if(cnt == 2) {
                    visit[curY][curX] = true;
                    DFS(y, x, sum + map[curY][curX], 3);
                    visit[curY][curX] = false;
                }
                visit[curY][curX] = true;
                DFS(curY, curX, sum + map[curY][curX], cnt+1);
                visit[curY][curX] = false;
            }

        }

    }
}
