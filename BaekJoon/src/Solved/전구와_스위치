package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class 전구와_스위치 {

    static int N;
    static boolean chooseFirst[], notChooseFirst[], expected[];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        N = Integer.parseInt(br.readLine());
        String[] str = br.readLine().split("");
        chooseFirst = new boolean[N];
        notChooseFirst = new boolean[N];
        for (int i = 0; i < N; i++) {
            if (str[i].equals("0")) {
                chooseFirst[i] = false;
                notChooseFirst[i] = false;
            } else {
                chooseFirst[i] = true;
                notChooseFirst[i] = true;
            }
        }

        str = br.readLine().split("");
        expected = new boolean[N];
        for (int i = 0; i < N; i++) {
            if (str[i].equals("0")) {
                expected[i] = false;
            } else {
                expected[i] = true;
            }
        }

        chooseFirst[0] = !chooseFirst[0];
        chooseFirst[1] = !chooseFirst[1];

        int cnt1 = greedy(chooseFirst) + 1;
        int cnt2 = greedy(notChooseFirst);

        boolean sameCheck1 = isSame(chooseFirst);
        boolean sameCheck2 = isSame(notChooseFirst);

        if (sameCheck1 && sameCheck2) {
            System.out.println(Math.min(cnt1, cnt2));
        } else if(!sameCheck1 && sameCheck2) {
            System.out.println(cnt2);
        } else if(sameCheck1 && !sameCheck2) {
            System.out.println(cnt1);
        } else {
            System.out.println(-1);
        }

    }

    static int greedy(boolean[] origin) {
        int cnt = 0;
        for (int i = 1; i < N; i++) {
            if (origin[i - 1] != expected[i - 1]) {
                origin[i - 1] = !origin[i - 1];
                origin[i] = !origin[i];
                if (i + 1 < N) {
                    origin[i + 1] = !origin[i + 1];
                }
                cnt++;
            }
        }
        return cnt;
    }

    static boolean isSame(boolean[] origin) {
        for (int i=0; i<N; i++) {
            if (origin[i] != expected[i]) {
                return false;
            }
        }
        return true;
    }

}
