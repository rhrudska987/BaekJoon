package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 감시 {

    static class CCTV {
        int type;
        int x;
        int y;

        public CCTV(int type, int x, int y){
            this.type =type;
            this.x = x;
            this.y = y;
        }
    }

    static int N;
    static int M;
    static int map[][];
    static int copyMap[][];
    static int output[];
    static ArrayList<CCTV> list = new ArrayList<>();
    static int min = Integer.MAX_VALUE;
    static int dx[] = new int[]{-1, 0, 1, 0};
    static int dy[] = new int[]{0, 1, 0, -1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        map = new int[N][M];

        for (int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<M; j++){
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] > 0 && map[i][j] < 6)
                    list.add(new CCTV(map[i][j], i, j));
            }
        }

        output = new int[list.size()];
        permutation(0, list.size());
        System.out.println(min);
    }

    static void permutation(int idx, int size) {
        if(idx == size) {
            copyMap = new int[N][M];
            for (int i=0; i < map.length; i++)
                System.arraycopy(map[i], 0, copyMap[i], 0, map[i].length);

            for (int i=0; i<list.size(); i++)
                direction(list.get(i), output[i]);

            getBlindSpot();
            return;
        }
        for (int i=0; i<4; i++){
            output[idx] = i;
            permutation(idx+1, size);
        }
    }

    public static void direction(CCTV cctv, int d) {
        int cctvNum = cctv.type;

        if(cctvNum == 1) {
            if(d == 0) watch(cctv, 0); // 상
            else if(d == 1) watch(cctv, 1); // 우
            else if(d == 2) watch(cctv, 2); // 하
            else if(d == 3) watch(cctv, 3); // 좌
        } else if(cctvNum == 2) {
            if(d == 0 || d == 2) {
                watch(cctv, 0); watch(cctv, 2); // 상하
            } else {
                watch(cctv, 1); watch(cctv, 3); // 좌우
            }
        } else if(cctvNum == 3) {
            if(d == 0) {
                watch(cctv, 0); // 상우
                watch(cctv, 1);
            } else if(d == 1) {
                watch(cctv, 1); // 우하
                watch(cctv, 2);
            } else if(d == 2) {
                watch(cctv, 2); // 하좌
                watch(cctv, 3);
            } else if(d == 3) {
                watch(cctv, 0); // 좌상
                watch(cctv, 3);
            }
        } else if(cctvNum == 4) {
            if(d == 0) {
                watch(cctv, 0); // 좌상우
                watch(cctv, 1);
                watch(cctv, 3);
            } else if(d == 1) {
                watch(cctv, 0); // 상우하
                watch(cctv, 1);
                watch(cctv, 2);
            } else if(d == 2) {
                watch(cctv, 1); // 좌하우
                watch(cctv, 2);
                watch(cctv, 3);
            } else if(d == 3) {
                watch(cctv, 0); // 상좌하
                watch(cctv, 2);
                watch(cctv, 3);
            }
        } else if(cctvNum == 5) { // 상우하좌
            watch(cctv, 0);
            watch(cctv, 1);
            watch(cctv, 2);
            watch(cctv, 3);
        }
    }

    static void watch(CCTV cctv, int d) {
        Queue<CCTV> queue = new LinkedList<>();
        boolean[][] visited = new boolean[N][M];

        queue.add(cctv);
        visited[cctv.x][cctv.y] = true;

        while(queue.size() > 0) {
            int nx = queue.peek().x + dx[d];
            int ny = queue.poll().y + dy[d];

            if(nx < 0 || nx >= N || ny < 0 || ny >= M || copyMap[nx][ny] == 6)
                break;

            if(copyMap[nx][ny] == 0){
                copyMap[nx][ny] = -1;
                queue.add(new CCTV(cctv.type, nx, ny));
            }
            else {
                queue.add(new CCTV(cctv.type, nx, ny));
            }
        }
    }

    static void getBlindSpot() {
        int cnt = 0;
        for (int i=0; i<N; i++){
            for (int j=0; j<M; j++){
                if(copyMap[i][j] == 0)
                    cnt++;
            }
        }
        min = Math.min(min, cnt);
    }

}
