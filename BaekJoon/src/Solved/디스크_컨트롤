package DynamicProgramming;

import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

public class 디스크_컨트롤러 {

	static class Solution {
		public int solution(int[][] jobs) {

			Arrays.sort(jobs, new Comparator<int[]>(){
				@Override
				public int compare(int[] o1, int[] o2) {
					return o1[0] - o2[0];
				}
			});

			PriorityQueue<Disk> priorityQueue = new PriorityQueue<>();

			int answer = 0;
			int time = 0;
			int cnt = 0;
			int idx = 0;
			while (cnt < jobs.length) {
				while (idx < jobs.length && jobs[idx][0] <= time) {
					priorityQueue.add(new Disk(jobs[idx][0], jobs[idx][1]));
					idx++;
				}

				if (priorityQueue.isEmpty()) {
					time = jobs[idx][0];
				} else {
					Disk disk = priorityQueue.poll();
					answer += (time - disk.seq) + disk.duration;
					time += disk.duration;
					cnt++;
				}
			}

			return answer / jobs.length;
		}

	}

	static class Disk implements Comparable<Disk> {
		int seq;
		int duration;

		public Disk(int seq, int duration) {
			this.seq = seq;
			this.duration = duration;
		}

		@Override
		public int compareTo(Disk disk) {
			if (this.duration > disk.duration) {
				return 1;
			} else if (this.duration < disk.duration) {
				return -1;
			}
			return 0;
		}

	}

	public static void main(String[] args) {
		Solution so = new Solution();
		int[][] jobs = {{0, 10}, {0, 9}, {0, 17}, {2, 9}};
		System.out.println(so.solution(jobs));
	}

}
