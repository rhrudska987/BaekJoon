package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 연산자_끼워넣기 {

	static int N;
	static int[] A;
	static int[] operator;
	static int[] usedOperator;
	static int max = Integer.MIN_VALUE;
	static int min = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		N = Integer.parseInt(br.readLine());
		A = new int[N];
		operator = new int[4];
		usedOperator = new int[4];

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < N; i++) {
			A[i] = Integer.parseInt(st.nextToken());
		}

		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < 4; i++) {
			operator[i] = Integer.parseInt(st.nextToken());
		}

		backTracking(0, 0, 0);

		System.out.println(max);
		System.out.println(min);
	}

	private static void backTracking(int usedCnt, int aIdx, int sum) {
		if (usedCnt == N - 1) {
			max = Math.max(max, sum);
			min = Math.min(min, sum);
			return;
		}

		for (int i=0; i<4; i++) {
			if (operator[i] != 0 && operator[i] - usedOperator[i] > 0){
				int result = sum;
				if (aIdx == 0) {
					result = calc(A[0], A[1], i);
				} else {
					result = calc(sum, A[aIdx + 1], i);
				}
				usedOperator[i]++;
				backTracking(usedCnt + 1, aIdx + 1, result);
				usedOperator[i]--;
			}
		}
	}

	private static int calc(int a1, int a2, int i) {
		if (i == 0) {
			return a1 + a2;
		} else if (i == 1) {
			return a1 - a2;
		} else if (i == 2) {
			return a1 * a2;
		} else {
			return a1 / a2;
		}
	}

}
