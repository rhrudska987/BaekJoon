package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 마인크래프트 {

    static int N, M, B;
    static int map[][];
    static int answerMin = Integer.MAX_VALUE;
    static int answerFloor;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());

        map = new int[N][M];
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for (int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<M; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
                if(map[i][j] < min)
                    min = map[i][j];
                if(map[i][j] > max)
                    max = map[i][j];
            }
        }

        for (int i=min; i<=max; i++)
            bruteForce(i, B);

        System.out.println(answerMin + " " + answerFloor);
    }

    static void bruteForce(int floor, int blockCnt) {
        int time = 0;

        for (int i=0; i<N; i++) {
            for (int j=0; j<M; j++) {
                if(map[i][j] < floor){
                    time+=(floor - map[i][j]);
                    blockCnt-=(floor - map[i][j]);
                }
                if(map[i][j] > floor){
                    time+=((map[i][j]-floor)*2);
                    blockCnt+=(map[i][j]-floor);
                }
            }
        }
        if(blockCnt < 0)
            return;
        if(time <= answerMin) {
            answerMin = time;
            answerFloor = floor;
        }
    }

}
