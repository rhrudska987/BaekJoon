package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

public class 맥주_마시면서_걸어가기 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		StringBuilder sb = new StringBuilder();

		List<Point> pointList;
		List<List<Integer>> graph;

		int T = Integer.parseInt(br.readLine());
		while (T-- > 0) {
			int n = Integer.parseInt(br.readLine());

			pointList = new ArrayList<>();
			for (int i = 0; i < n + 2; i++) {
				st = new StringTokenizer(br.readLine());
				int x = Integer.parseInt(st.nextToken());
				int y = Integer.parseInt(st.nextToken());
				pointList.add(new Point(x, y));
			}

			graph = new ArrayList<>();
			for (int i = 0; i < n + 2; i++) {
				graph.add(new ArrayList<>());
			}

			for (int i = 0; i < n + 2; i++) {
				for (int j = i + 1; j < n + 2; j++) {
					Point point1 = pointList.get(i);
					Point point2 = pointList.get(j);
					if (Math.abs(point1.x - point2.x) + Math.abs(point1.y - point2.y) <= 1000) {
						graph.get(i).add(j);
						graph.get(j).add(i);
					}
				}
			}

			if (bfs(graph, n)) {
				sb.append("happy\n");
			} else {
				sb.append("sad\n");
			}
		}
		System.out.println(sb);
	}

	static boolean bfs(List<List<Integer>> graph, int n) {
		Queue<Integer> q = new LinkedList<>();
		q.add(0);

		boolean[] visited = new boolean[n + 2];
		visited[0] = true;

		while(!q.isEmpty()) {
			int now = q.poll();

			if (now == n+1) {
				return true;
			}

			for (int i=0; i<graph.get(now).size(); i++) {
				if (!visited[graph.get(now).get(i)]) {
					visited[graph.get(now).get(i)] = true;
					q.add(graph.get(now).get(i));
				}
			}
		}

		return false;
	}

	static class Point {
		int x;
		int y;

		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

}
