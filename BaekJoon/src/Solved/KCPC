package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class KCPC {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        int T = Integer.parseInt(br.readLine());
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < T; i++) {
            st = new StringTokenizer(br.readLine());
            int n = Integer.parseInt(st.nextToken());
            int k = Integer.parseInt(st.nextToken());
            int t = Integer.parseInt(st.nextToken());
            int m = Integer.parseInt(st.nextToken());
            int[][] team = new int[n][4];
            int[][] solved = new int[n + 1][k + 1];
            for (int j = 1; j <= n; j++) {
                team[j - 1][0] = j;
            }

            for (int j = 0; j < m; j++) {
                st = new StringTokenizer(br.readLine());
                int teamID = Integer.parseInt(st.nextToken());
                int problemID = Integer.parseInt(st.nextToken());
                int score = Integer.parseInt(st.nextToken());

                if (solved[teamID][problemID] == 0) {
                    solved[teamID][problemID] = score;
                    team[teamID - 1][1] += score;
                } else if (score > solved[teamID][problemID]) {
                    team[teamID - 1][1] -= solved[teamID][problemID];
                    team[teamID - 1][1] += score;
                    solved[teamID][problemID] = score;
                }
                team[teamID - 1][2]++;
                team[teamID - 1][3] = j;
            }

            Arrays.sort(team, new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    if (o1[1] != o2[1]) {
                        return o2[1] - o1[1];
                    } else if (o1[2] != o2[2]) {
                        return o1[2] - o2[2];
                    } else {
                        return o1[3] - o2[3];
                    }
                }
            });

            for (int j = 0; j < n; j++) {
                if (team[j][0] == t) {
                    sb.append(j + 1 + "\n");
                }
            }
        }
        sb.deleteCharAt(sb.length() - 1);
        System.out.println(sb);
    }

}
