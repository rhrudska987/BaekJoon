package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

public class 창고_다각형 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int N = Integer.parseInt(br.readLine());

		List<Pillar> list = new ArrayList<>();
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			int l = Integer.parseInt(st.nextToken());
			int h = Integer.parseInt(st.nextToken());
			list.add(new Pillar(l, h));
		}

		Collections.sort(list, new Comparator<Pillar>() {
			@Override
			public int compare(Pillar o1, Pillar o2) {
				return o1.l - o2.l;
			}
		});

		int sum = 0;
		int maxHighPoint = 0;

		Pillar beforePillar = list.get(0);
		for (int i = 1; i < list.size(); i++) {
			Pillar currentPillar = list.get(i);
			if (beforePillar.h <= currentPillar.h) {
				sum += beforePillar.h * (currentPillar.l - beforePillar.l);
				beforePillar = currentPillar;
				maxHighPoint = i;
			}
		}

		beforePillar = list.get(list.size() - 1);
		for (int i = 1; i < list.size() - maxHighPoint; i++) {
			Pillar currentPillar = list.get(list.size() - 1 - i);
			if (beforePillar.h <= currentPillar.h) {
				sum += beforePillar.h * (beforePillar.l - currentPillar.l);
				beforePillar = currentPillar;
			}
		}

		sum += list.get(maxHighPoint).h;

		System.out.println(sum);
	}

	static class Pillar {
		int l;
		int h;

		public Pillar(int l, int h) {
			this.l = l;
			this.h = h;
		}
	}

}
