package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.PriorityQueue;

public class 가운데를_말해요 {

//    1. 제일 처음 최대 힙에 삽입
//    2. 최대 힙의 크기는 최소 힙의 크기와 같거나, 하나 더 큼
//    3. 최대 힙의 최대 원소는 최소 힙의 최소 원소보다 작거나 같음
//    4. 알고리즘에 맞지 않다면 최대 힙, 최소 힙의 가장 위의 값 swap
//    5. 이 두가지 규칙을 유지해 준다면 항상 최대 힙 top값이 중간값

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        int N = Integer.parseInt(br.readLine());
        int num = Integer.parseInt(br.readLine());
        sb.append(num + "\n");
        maxHeap.add(num);

        for (int i = 0; i < N - 1; i++) {
            num = Integer.parseInt(br.readLine());
            if (minHeap.size() < maxHeap.size()) {
                minHeap.add(num);
            } else {
                maxHeap.add(num);
            }
            if (maxHeap.peek() > minHeap.peek()) {
                int temp1 = maxHeap.poll();
                int temp2 = minHeap.poll();
                maxHeap.add(temp2);
                minHeap.add(temp1);
            }
            sb.append(maxHeap.peek() + "\n");
        }
        System.out.println(sb);
    }
}
