package DynamicProgramming;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class 나이트의_이동 {

    static int[] x = {1, 2, 2, 1, -1, -2, -2, -1};
    static int[] y = {2, 1, -1, -2, -2, -1, 1, 2};

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();
        int T = sc.nextInt();
        for (int i=0; i<T; i++) {
            int len = sc.nextInt();
            int now_x = sc.nextInt();
            int now_y = sc.nextInt();
            int want_x = sc.nextInt();
            int want_y = sc.nextInt();
            int cnt = dfs(len, now_x, now_y, want_x, want_y);
            sb.append(cnt + "\n");
        }

        sb.deleteCharAt(sb.length() - 1);
        System.out.println(sb);
    }

    private static int dfs(int len, int now_x, int now_y, int want_x, int want_y) {
        Queue<int []> queue = new LinkedList<>();
        Queue<Integer> cntQueue = new LinkedList<>();
        queue.add(new int[]{now_x, now_y});
        cntQueue.add(0);
        boolean visited[][] = new boolean[len][len];
        visited[now_x][now_y] = true;
        while(!queue.isEmpty()) {
            int[] arr = queue.poll();
            int cnt = cntQueue.poll();
            if(arr[0] == want_x && arr[1] == want_y) {
                return cnt;
            }
            for (int i=0; i<x.length; i++) {
                if(arr[0] + x[i] < 0 || arr[0] + x[i] >= len || arr[1] + y[i] < 0 || arr[1] + y[i] >= len) {
                    continue;
                }
                if(visited[arr[0] + x[i]][arr[1] + y[i]]) {
                    continue;
                }
                queue.add(new int[]{arr[0] + x[i], arr[1] + y[i]});
                visited[arr[0] + x[i]][arr[1] + y[i]] = true;
                cntQueue.add(cnt + 1);
            }
        }
        return 0;
    }

}
