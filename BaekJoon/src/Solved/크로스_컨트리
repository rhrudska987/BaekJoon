package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

public class 크로스_컨트리 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        StringBuilder sb = new StringBuilder();

        int T = Integer.parseInt(br.readLine());
        for (int i = 0; i < T; i++) {
            int N = Integer.parseInt(br.readLine());
            st = new StringTokenizer(br.readLine());
            List<Integer> score = new ArrayList<>();
            HashMap<Integer, Integer> teamCnt = new HashMap<>();
            for (int j = 0; j < N; j++) {
                int num = Integer.parseInt(st.nextToken());
                if (teamCnt.containsKey(num)) {
                    int cnt = teamCnt.get(num);
                    teamCnt.put(num, cnt + 1);
                } else {
                    teamCnt.put(num, 1);
                }
                score.add(num);
            }

            int idx = 0;
            while (idx < score.size()) {
                if (teamCnt.get(score.get(idx)) != 6) {
                    score.remove(idx);
                } else {
                    idx++;
                }
            }

            HashMap<Integer, int[]> map = new HashMap<>();
            for (int j = 0; j < score.size(); j++) {
                if (map.containsKey(score.get(j))) {
                    int[] arr = map.get(score.get(j));
                    if (arr[2] == 4) {
                        arr[1] = j + 1;
                    } else if (arr[2] < 4) {
                        arr[0] += j + 1;
                    }
                    arr[2]++;
                    map.put(score.get(j), arr);
                } else {
                    int[] arr = new int[3];
                    arr[0] += j + 1;
                    arr[2]++;
                    map.put(score.get(j), arr);
                }
            }

            int min = Integer.MAX_VALUE;
            int fifthIdx = Integer.MAX_VALUE;
            int winTeam = 0;
            for (int key : map.keySet()) {
                int[] arr = map.get(key);
                if (arr[0] == min) {
                    if (arr[1] < fifthIdx) {
                        fifthIdx = arr[1];
                        winTeam = key;
                    }
                } else if (arr[0] < min) {
                    fifthIdx = arr[1];
                    winTeam = key;
                    min = arr[0];
                }
            }
            sb.append(winTeam + "\n");
        }
        System.out.println(sb);
    }

}
