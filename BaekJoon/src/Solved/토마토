package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 토마토 {
    static int M;
    static int N;
    static int[][] tomato;
    static int[][] visitied;
    static Queue<int []> queue = new LinkedList<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        st = new StringTokenizer(br.readLine());
        int M = Integer.parseInt(st.nextToken());
        int N = Integer.parseInt(st.nextToken());

        tomato = new int[N][M];
        visitied = new int[N][M];

        for(int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<M; j++) {
                tomato[i][j] = Integer.parseInt(st.nextToken());
                if(tomato[i][j] == 1)
                    queue.add(new int[]{i,j});
                else if(tomato[i][j] == -1)
                    visitied[i][j] = 1;
            }
        }

        int answer = BFS(N, M);

        for(int i=0; i<N; i++){
            for(int j=0; j<M; j++){
                if(visitied[i][j] == 0){
                    System.out.println(-1);
                    return;
                }
            }
        }

        System.out.println(answer);
    }

    static int BFS(int N, int M){
        Queue<int[]> queue2 = new LinkedList<>();
        int cnt = 0;
        while(queue.size() != 0){
            while(queue.size() != 0) {
                int[] arr = queue.poll();
                int y = arr[0];
                int x = arr[1];
                visitied[y][x] = 1;
                if (x-1 >= 0 && visitied[y][x - 1] == 0) {
                    if (tomato[y][x - 1] == 0) {
                        tomato[y][x - 1] = 1;
                        queue2.add(new int[]{y, x - 1});
                    }
                    visitied[y][x - 1] = 1;
                }
                if (y-1 >= 0 && visitied[y - 1][x] == 0) {
                    if (tomato[y - 1][x] == 0) {
                        tomato[y - 1][x] = 1;
                        queue2.add(new int[]{y - 1, x});
                    }
                    visitied[y - 1][x] = 1;
                }
                if (x+1 < M && visitied[y][x + 1] == 0) {
                    if (tomato[y][x + 1] == 0) {
                        tomato[y][x + 1] = 1;
                        queue2.add(new int[]{y, x + 1});
                    }
                    visitied[y][x + 1] = 1;
                }
                if (y+1 < N && visitied[y + 1][x] == 0) {
                    if (tomato[y + 1][x] == 0) {
                        tomato[y + 1][x] = 1;
                        queue2.add(new int[]{y + 1, x});
                    }
                    visitied[y + 1][x] = 1;
                }
            }
            if(queue2.size() != 0){
                cnt++;
                while(queue2.size() != 0)
                    queue.add(queue2.poll());
            }
        }
        return cnt;
    }

}
