package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 이동하기 {

	static int map[][];
	static int dx[] = {-1, -1, 0};
	static int dy[] = {0, -1, -1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		map = new int[N + 1][M + 1];
		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		for (int i=1; i<=N; i++) {
			for (int j=1; j<=M; j++) {
				map[i][j] = dp(i, j);
				System.out.println("i: " + i + ", j: " + j + ", result: " + map[i][j]);
			}
		}

		System.out.println(map[N][M]);

	}

	private static int dp(int y, int x) {
		int max = 0;
		for (int i=0; i<3; i++) {
			int nextY = y + dy[i];
			int nextX = x + dx[i];
			max = Math.max(max, map[y][x] + map[nextY][nextX]);
		}
		return max;
	}

}
