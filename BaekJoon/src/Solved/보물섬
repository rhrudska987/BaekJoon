import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main {

    static int column;
    static int row;
    static String[][] map;
    static Queue<int []> queue = new LinkedList<>();
    static int[][] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        column = Integer.parseInt(st.nextToken());
        row = Integer.parseInt(st.nextToken());
        map = new String[column][row];
        visited = new int[column][row];

        for (int i=0; i<column; i++)
            map[i] = br.readLine().split("");

        int max = 0;
        for (int i=0; i<column; i++){
            for (int j=0; j<row; j++){
                if(map[i][j].equals("L")) {
                    queue.add(new int[]{i, j, 0});
                    visited[i][j] = 1;
                    int result = bruteForce();
                    if(result > max)
                        max = result;
                }
            }
        }
        System.out.println(max);

    }

    static int bruteForce() {
        int max = 0;
        while(queue.size() > 0) {
            int[] arr = queue.poll();
            int y = arr[0];
            int x = arr[1];
            int distance = arr[2];
            if(distance > max)
                max = distance;
            if(y-1 >= 0 && map[y-1][x].equals("L") && visited[y-1][x] == 0) {
                queue.add(new int[]{y - 1, x, distance + 1});
                visited[y-1][x] = 1;
            }
            if(y+1 < column && map[y+1][x].equals("L") && visited[y+1][x] == 0) {
                queue.add(new int[]{y + 1, x, distance + 1});
                visited[y+1][x] = 1;
            }
            if(x-1 >= 0 && map[y][x-1].equals("L") && visited[y][x-1] == 0) {
                queue.add(new int[]{y, x - 1, distance + 1});
                visited[y][x-1] = 1;
            }
            if(x+1 < row && map[y][x+1].equals("L") && visited[y][x+1] == 0) {
                queue.add(new int[]{y, x + 1, distance + 1});
                visited[y][x+1] = 1;
            }
        }
        for (int i=0; i<column; i++)
            Arrays.fill(visited[i], 0);
        return max;
    }

}
