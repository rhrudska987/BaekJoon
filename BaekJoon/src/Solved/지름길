package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class 지름길 {

    static int N, D;
    static int[][] road;
    static int min = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        D = Integer.parseInt(st.nextToken());

        road = new int[N][3];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < 3; j++) {
                road[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        Arrays.sort(road, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o1[0]!=o2[0] ? o1[0]-o2[0] : o1[1]-o2[1];
            }
        });

        if (road[0][0] <= D) {
            int distance = road[0][0];
            dfs(0, distance, distance);
            System.out.println(min);
        } else {
            System.out.println(D);
        }

    }

    static void dfs(int idx, int distance, int driveDistance) {
        if (distance > D) {
            return;
        } else if (distance == D) {
            min = Math.min(min, driveDistance);
            return;
        } else {
            min = Math.min(min, driveDistance + (D - distance));
        }

        for (int i=idx; i<N; i++) {
            if (road[i][0] > distance) {
                driveDistance += road[i][0] - distance;
                distance = road[i][0];
            }

            if (i + 1 < N && road[i+1][1] < road[i][0]) {
                dfs (i + 1, road[i][1], driveDistance + road[i][2]);
                dfs (i + 1, road[i + 1][0], driveDistance + (road[i + 1][0] - road[i][0]));
            } else if (road[i][1] <= D && road[i][0] >= distance) {
                dfs(i + 1, road[i][1], driveDistance + road[i][1]);
                dfs(i + 1, road[i][1], driveDistance + road[i][2]);
            } else {
                dfs(i + 1, D, driveDistance + (D - road[i][0]));
            }
        }

    }

}
