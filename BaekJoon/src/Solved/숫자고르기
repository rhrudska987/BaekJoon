package DynamicProgramming;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class 숫자고르기 {

    static int N;
    static int[] table;
    static boolean[] visited;
    static HashSet<Integer> set = new HashSet<>();
    static List<Integer> list = new ArrayList<>();
    static int answer = 0;

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        N = sc.nextInt();
        table = new int[N + 1];
        visited = new boolean[N + 1];

        for (int i=1; i<=N; i++) {
            table[i] = sc.nextInt();
        }

        for (int i=1; i<=N; i++) {
            if (visited[i]) {
                continue;
            }
            set.add(i);
            dfs(i, table[i]);
            set.clear();
        }

        System.out.println(answer);
        Collections.sort(list);
        for (int i=0; i<list.size(); i++) {
            System.out.println(list.get(i));
        }

    }

    static void dfs(int firstNum, int idx) {
        if (firstNum == idx) {
            answer += set.size();
            Iterator<Integer> iterator = set.iterator();
            while (iterator.hasNext()) {
                int num = iterator.next();
                visited[num] = true;
                list.add(num);
            }
            return;
        }
        int originSize = set.size();
        set.add(idx);
        if (set.size() == originSize) {
            return;
        }
        dfs(firstNum, table[idx]);
    }

}
