package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 봄버맨 {

    static String map[][];
    static int time[][];
    static int dx[] = {-1, 0, 1, 0};
    static int dy[] = {0, -1, 0, 1};
    static int R, C, N;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());

        map = new String[R][C];
        time = new int[R][C];
        for (int i=0; i<R; i++) {
            st = new StringTokenizer(br.readLine());
            String[] str = st.nextToken().split("");
            for (int j=0; j<C; j++) {
                map[i][j] = str[j];
                if(map[i][j].equals("O")) {
                    time[i][j] = 3;
                }
            }
        }

        for (int i=1; i<=N; i++) {
            if(i%2 == 0) {
                plantBomb();
            } else {
                explodeBomb();
            }
        }
        for (int j=0; j<R; j++) {
            for (int k=0; k<C; k++) {
                System.out.print(map[j][k]);
            }
            System.out.println();
        }
    }

    static void plantBomb() {
        timeMinus();
        for (int i=0; i<R; i++) {
            for (int j=0; j<C; j++) {
                if(map[i][j].equals(".")) {
                    map[i][j] = "O";
                    time[i][j] = 3;
                }
            }
        }
    }

    static void explodeBomb() {
        for (int i=0; i<R; i++) {
            for (int j=0; j<C; j++) {
                if(map[i][j].equals("O") && time[i][j] == 1) {
                    for (int k=0; k<4; k++) {
                        int ny = i + dy[k];
                        int nx = j + dx[k];
                        if(ny >= 0 && ny < R && nx >= 0 && nx < C && time[ny][nx] != 1) {
                            map[ny][nx] = ".";
                        }
                    }
                    map[i][j] = ".";
                }
            }
        }
        timeMinus();
    }

    static void timeMinus() {
        for (int i=0; i<R; i++) {
            for (int j=0; j<C; j++) {
                time[i][j]--;
            }
        }
    }

}
