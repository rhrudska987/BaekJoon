package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 문제집 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());

		int[] indegree = new int[N + 1];
		List<List<Integer>> graph = new ArrayList<>();
		for (int i=0; i<=N; i++) {
			graph.add(new ArrayList<>());
		}

		for (int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine());
			int first = Integer.parseInt(st.nextToken());
			int second = Integer.parseInt(st.nextToken());
			graph.get(first).add(second);
			indegree[second]++;
		}

		PriorityQueue<Integer> pq = new PriorityQueue<>();

		for (int i=1; i<=N; i++) {
			if (indegree[i] == 0) {
				pq.add(i);
			}
		}

		while (!pq.isEmpty()) {
			int now = pq.poll();
			System.out.print(now + " ");

			for (int i=0; i<graph.get(now).size(); i++) {
				int idx = graph.get(now).get(i);
				indegree[idx]--;
				if (indegree[idx] == 0) {
					pq.add(idx);
				}
			}
		}

	}
}
