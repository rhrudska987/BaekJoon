package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class 아기_상어 {

    static int N;
    static int map[][];
    static int positionX, positionY;
    static int sharkSize = 2;
    static int eat = 0;
    static int dx[] = {-1, 0, 1, 0};
    static int dy[] = {0, -1, 0, 1};
    static int dist[][];
    static int minDist;
    static int minX;
    static int minY;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        N = Integer.parseInt(br.readLine());
        map = new int[N][N];
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());

                if (map[i][j] == 9) {
                    positionX = j;
                    positionY = i;
                    map[i][j] = 0;
                }
            }
        }

        int times = 0;
        while (true) {
            dist = new int[N][N];
            minX = Integer.MAX_VALUE;
            minY = Integer.MAX_VALUE;
            minDist = Integer.MAX_VALUE;

            bfs(positionX, positionY);

            if (minX != Integer.MAX_VALUE && minY != Integer.MAX_VALUE) {
                map[minY][minX] = 0;
                positionY = minY;
                positionX = minX;
                eat++;
                times += dist[minY][minX];
                if (eat == sharkSize) {
                    sharkSize++;
                    eat = 0;
                }
            } else {
                break;
            }

        }
        System.out.println(times);
    }

    static void bfs(int nowX, int nowY) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{nowX, nowY});

        while (!queue.isEmpty()) {
            int[] arr = queue.poll();
            for (int i = 0; i < 4; i++) {
                int nx = arr[0] + dx[i];
                int ny = arr[1] + dy[i];
                if (nx >= 0 && nx < N && ny >= 0 && ny < N && map[ny][nx] <= sharkSize && dist[ny][nx] == 0) {
                    dist[ny][nx] = dist[arr[1]][arr[0]] + 1;
                    if (map[ny][nx] < sharkSize && map[ny][nx] != 0) {
                        if (minDist > dist[ny][nx]) {
                            minX = nx;
                            minY = ny;
                            minDist = dist[ny][nx];
                        } else if (minDist == dist[ny][nx]) {
                            if (minY > ny) {
                                minY = ny;
                                minX = nx;
                            } else if (minY == ny) {
                                if (minX > nx) {
                                    minY = ny;
                                    minX = nx;
                                }
                            }
                        }
                    }
                    queue.add(new int[]{nx, ny});
                }
            }
        }
    }
}
