package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 스타트와_링크 {

	static int N;
	static int[][] stats;
	static boolean[] visited;
	static int min = Integer.MAX_VALUE;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		N = Integer.parseInt(br.readLine());
		visited = new boolean[N + 1];
		stats = new int[N + 1][N + 1];
		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= N; j++) {
				stats[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		backTracking(0, 1);
		System.out.println(min);
	}

	static void backTracking(int cnt, int idx) {
		if (cnt == N / 2) {
			int firstTeam = 0;
			int secondTeam = 0;
			for (int i = 1; i <= N; i++) {
				for (int j = 1; j <= N; j++) {
					if (i == j) {
						continue;
					}
					if (!visited[i] && !visited[j]) {
						firstTeam += stats[i][j];
					} else if (visited[i] && visited[j]){
						secondTeam += stats[i][j];
					}
				}
			}
			min = Math.min(min, Math.abs(firstTeam - secondTeam));
			return;
		}

		for (int i = idx; i <= N; i++) {
			visited[i] = true;
			backTracking(cnt + 1, i + 1);
			visited[i] = false;
		}

	}

}
