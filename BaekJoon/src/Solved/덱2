package DynamicProgramming;

import java.util.Scanner;

public class Îç±2 {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        StringBuilder sb = new StringBuilder();
        int N = sc.nextInt();
        DeQueue deQueue = new DeQueue();

        for (int i = 0; i < N; i++) {
            int command = sc.nextInt();
            int x;
            switch (command) {
                case 1:
                    x = sc.nextInt();
                    deQueue.pushFront(x);
                    break;
                case 2:
                    x = sc.nextInt();
                    deQueue.pushBack(x);
                    break;
                case 3:
                    sb.append(deQueue.popFront() + "\n");
                    break;
                case 4:
                    sb.append(deQueue.popBack() + "\n");
                    break;
                case 5:
                    sb.append(deQueue.size() + "\n");
                    break;
                case 6:
                    sb.append(deQueue.empty() + "\n");
                    break;
                case 7:
                    sb.append(deQueue.peekFront() + "\n");
                    break;
                case 8:
                    sb.append(deQueue.peekBack() + "\n");
                    break;
            }
        }
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }
        System.out.println(sb);
    }

    static class DeQueue {
        int front, rear;
        int[] deQueueArray;

        public DeQueue() {
            front = 1000000;
            rear = 1000001;
            deQueueArray = new int[2000002];
        }

        public void pushFront(int x) {
            deQueueArray[front--] = x;
        }

        public void pushBack(int x) {
            deQueueArray[rear++] = x;
        }

        public int popFront() {
            if (rear - front == 1) {
                return -1;
            }
            return deQueueArray[++front];
        }

        public int popBack() {
            if (rear - front == 1) {
                return -1;
            }
            return deQueueArray[--rear];
        }

        public int size() {
            return rear - front - 1;
        }

        public int empty() {
            if (rear - front == 1) {
                return 1;
            }
            return 0;
        }

        public int peekFront() {
            if (rear - front == 1) {
                return -1;
            }
            return deQueueArray[front + 1];
        }

        public int peekBack() {
            if (rear - front == 1) {
                return -1;
            }
            return deQueueArray[rear - 1];
        }

    }

}
