package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.HashMap;
import java.util.StringTokenizer;

public class 숫자_카드2 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        int N = Integer.parseInt(br.readLine());
        int card[] = new int[N];

        st = new StringTokenizer(br.readLine());
        for(int i=0; i<N; i++)
            card[i] = Integer.parseInt(st.nextToken());
        Arrays.sort(card);

        int M = Integer.parseInt(br.readLine());

        StringBuilder sb = new StringBuilder();

        st = new StringTokenizer(br.readLine());
        for(int i=0; i<M; i++) {
            int num = Integer.parseInt(st.nextToken());
            sb.append(upperBound(card, num) - lowerBound(card, num) + " ");
        }

        System.out.println(sb.toString());
    }

    static int upperBound(int[] card, int num){
        int low = 0;
        int high = card.length;

        while(low < high){
            int mid = (low + high)/2;
            if(num < card[mid])
                high = mid;
            else
                low = mid+1;
        }
        return low;
    }

    static int lowerBound(int[] card, int num){
        int low = 0;
        int high = card.length;
        while(low < high){
            int mid = (low + high)/2;
            if(num <= card[mid])
                high = mid;
            else
                low = mid+1;
        }
        return low;
    }
}
