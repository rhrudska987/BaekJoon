package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 강의실 {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;

		int N = Integer.parseInt(br.readLine());
		int[][] lectureTime = new int[N][2];
		for (int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			st.nextToken();
			lectureTime[i][0] = Integer.parseInt(st.nextToken());
			lectureTime[i][1] = Integer.parseInt(st.nextToken());
		}

		Arrays.sort(lectureTime, new Comparator<int[]>(){
			@Override
			public int compare(int[] o1, int[] o2) {
				if (o1[0] == o2[0]) {
					return o1[1] - o2[1];
				}
				return o1[0] - o2[0];
			}
		});

		PriorityQueue<Integer> pq = new PriorityQueue<>();
		int roomCnt = 0;
		int lectureIdx = 0;
		while (lectureIdx < N) {
			if (!pq.isEmpty() && pq.peek() <= lectureTime[lectureIdx][0]) {
				pq.poll();
				roomCnt--;
			}
			pq.add(lectureTime[lectureIdx++][1]);
			roomCnt++;
		}

		System.out.println(roomCnt);
	}

}
