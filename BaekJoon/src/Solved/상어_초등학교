package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.StringTokenizer;

public class 상어_초등학교 {

    static int map[][];
    static int N;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static HashMap<Integer, int[]> hashMap = new LinkedHashMap<>();

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        N = Integer.parseInt(br.readLine());
        map = new int[N + 1][N + 1];
        for (int i = 0; i < N * N; i++) {
            st = new StringTokenizer(br.readLine());
            int s1 = Integer.parseInt(st.nextToken());
            int s2 = Integer.parseInt(st.nextToken());
            int s3 = Integer.parseInt(st.nextToken());
            int s4 = Integer.parseInt(st.nextToken());
            int s5 = Integer.parseInt(st.nextToken());
            hashMap.put(s1, new int[]{s2, s3, s4, s5});
            findSeat(s1);
        }

        int score = 0;
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                int cnt = 0;
                int[] friends = hashMap.get(map[i][j]);
                for (int k = 0; k < dx.length; k++) {
                    int y = i + dy[k];
                    int x = j + dx[k];
                    if (y > 0 && y <= N && x > 0 && x <= N) {
                        for (int m = 0; m < 4; m++) {
                            if (map[y][x] == friends[m]) {
                                cnt++;
                                break;
                            }
                        }
                    }
                }
                switch (cnt) {
                    case 1:
                        score += 1;
                        break;
                    case 2:
                        score += 10;
                        break;
                    case 3:
                        score += 100;
                        break;
                    case 4:
                        score += 1000;
                        break;
                }
            }
        }
        System.out.println(score);
    }

    static void findSeat(int studentId) {
        List<int[]> list = new ArrayList<>();
        for (int i = 1; i <= N; i++) {
            for (int j = 1; j <= N; j++) {
                int friendsCnt = 0;
                int emptySeatCnt = 0;
                for (int k = 0; k < dx.length; k++) {
                    int y = i + dy[k];
                    int x = j + dx[k];
                    if (y <= 0 || y > N || x <= 0 || x > N) {
                        continue;
                    }
                    if (map[y][x] == 0) {
                        emptySeatCnt++;
                    }
                    else {
                        int[] friends = hashMap.get(studentId);
                        for (int m=0; m<4; m++) {
                            if(map[y][x] == friends[m]) {
                                friendsCnt++;
                                break;
                            }
                        }
                    }
                }
                list.add(new int[] {friendsCnt, emptySeatCnt, i, j});
            }
        }

        Collections.sort(list, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if(o1[0] < o2[0]) return 1;
                else if(o1[0] == o2[0]) {
                    if(o1[1] < o2[1]) return 1;
                    else if(o1[1] == o2[1]) {
                        if(o1[2] < o2[2]) return 1;
                        else if(o1[2] == o2[2]) {
                            if(o1[3] < o2[3]) return 1;
                        }
                    }
                }
                return -1;
            }
        });

        for (int i=0; i<list.size(); i++) {
            int y = list.get(i)[2];
            int x = list.get(i)[3];
            if(map[y][x] == 0) {
                map[y][x] = studentId;
                return;
            }
        }
    }

}
