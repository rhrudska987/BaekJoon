package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringTokenizer;

public class 적록색약 {
    static int cnt = 0;
    static int N;
    static String picture[][];
    static int visited[][];
    static Queue<int[]> queue = new LinkedList<>();

    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);

        N = Integer.parseInt(sc.nextLine());
        picture = new String[N][N];
        visited = new int[N][N];

        for(int i=0; i<N; i++) {
            String s_arr[] = sc.nextLine().split("");
            for (int j=0; j<N; j++){
                picture[i][j] = s_arr[j];
            }
        }
        bfs();
        System.out.println(cnt);

        for(int i=0; i<N; i++) {
            for (int j=0; j<N; j++){
                if(picture[i][j].equals("G"))
                    picture[i][j] = "R";
            }
        }
        visited = new int[N][N];
        cnt = 0;
        bfs();
        System.out.println(cnt);
    }

    static void bfs(){
        queue.add(new int[]{0, 0});
        while(queue.size() > 0){
            cnt++;
            int point[] = queue.poll();
            int y = point[0];
            int x = point[1];
            String color = picture[y][x];
            dfs(x, y, color);
            findColor();
        }
    }

    static void dfs(int x, int y, String color){
        if(x < 0 || x >= N || y < 0 || y >= N || visited[y][x] == 1)
            return;
        if(!picture[y][x].equals(color))
            return;
        visited[y][x] = 1;
        dfs(x-1, y, color);
        dfs(x+1, y, color);
        dfs(x, y-1, color);
        dfs(x, y+1, color);
    }

    static void findColor(){
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(visited[i][j] == 0){
                    queue.add(new int[]{i, j});
                    return;
                }
            }
        }
    }
}
