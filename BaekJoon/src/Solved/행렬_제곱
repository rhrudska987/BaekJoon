package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 행렬_제곱 {

    static int N;
    static long B;
    static int[][] A;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        B = Long.parseLong(st.nextToken());

        A = new int[N][N];
        for (int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<N; j++)
                A[i][j] = Integer.parseInt(st.nextToken());
        }
        if(B == 1){
            for (int i=0; i<N; i++) {
                for (int j = 0; j < N; j++)
                    System.out.print(A[i][j] % 1000 + " ");
                System.out.println();
            }
        }
        else{
            int answer[][] = pow(A, B);
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++)
                    System.out.print(answer[i][j] + " ");
                System.out.println();
            }
        }
    }

    static int[][] pow(int arr[][], long idx) {
        if(idx == 1)
            return arr;

        int temp[][] = pow(arr, idx/2);
        temp = calc(temp, temp);

        if(idx % 2 == 1)
            temp = calc(temp, A);

        return temp;
    }

    static int[][] calc(int[][] arr1, int[][] arr2) {
        int[][] temp = new int[N][N];
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                int sum = 0;
                for (int k = 0; k < N; k++)
                    sum += (arr1[i][k] * arr2[k][j]);
                temp[i][j] = sum%1000;
            }
        }
        return temp;
    }

}
