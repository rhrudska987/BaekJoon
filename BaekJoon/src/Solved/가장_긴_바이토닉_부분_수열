package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 가장_긴_바이토닉_부분_수열 {

    static int N;
    static int arr[];
    static int lis_arr[];
    static int lds_arr[];

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine());
        arr = new int[N];
        lis_arr = new int[N];
        lds_arr = new int[N];
        for (int i=0; i<N; i++)
            arr[i] = Integer.parseInt(st.nextToken());

        LIS();
        LDS();

        int max = 0;
        for (int i=0; i<N; i++) {
            arr[i] = lis_arr[i] + lds_arr[i] - 1;
            if(max < arr[i])
                max = arr[i];
        }
        System.out.println(max);
    }

    static void LIS(){
        for (int i=0; i<N; i++){
            lis_arr[i] = 1;
            for (int j=0; j<i; j++){
                if(arr[i] > arr[j] && lis_arr[i] < lis_arr[j] + 1)
                    lis_arr[i] = lis_arr[j] + 1;
            }
        }
    }

    static void LDS(){
        for (int i=N-1; i>=0; i--){
            lds_arr[i] = 1;
            for (int j=N-1; j>i; j--){
                if(arr[i] > arr[j] && lds_arr[i] < lds_arr[j] + 1)
                    lds_arr[i] = lds_arr[j] + 1;
            }
        }
    }
}
