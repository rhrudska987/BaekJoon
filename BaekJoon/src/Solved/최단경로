package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class 최단경로 {

    static class Node {
        int idx;
        int w;

        Node(int idx, int w) {
            this.idx = idx;
            this.w = w;
        }
    }

    static int V, E;
    static ArrayList<ArrayList<Node>> list;
    static int dist[];
    static int maxValue = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        V = Integer.parseInt(st.nextToken());
        E = Integer.parseInt(st.nextToken());
        int start = Integer.parseInt(br.readLine());

        list = new ArrayList<ArrayList<Node>>();
        for (int i = 0; i < V + 1; i++) {
            list.add(new ArrayList<Node>());
        }

        dist = new int[V + 1];
        for (int i = 0; i < E; i++) {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());
            list.get(u).add(new Node(v, w));
        }

        for (int i = 0; i < V+1; i++) {
            dist[i] = maxValue;
        }

        dijkstra(start);
        for (int i = 1; i <= V; i++) {
            if (dist[i] == maxValue) {
                System.out.println("INF");
                continue;
            }
            System.out.println(dist[i]);
        }
    }

    static void dijkstra(int start) {
        PriorityQueue<Node> queue = new PriorityQueue<>((o1, o2) -> Integer.compare(o1.w, o2.w));
        queue.add(new Node(start, 0));
        dist[start] = 0;

        while (!queue.isEmpty()) {
            Node temp = queue.poll();

            if (dist[temp.idx] < temp.w) {
                continue;
            }

            for (int i = 0; i < list.get(temp.idx).size(); i++) {
                Node nextNode = list.get(temp.idx).get(i);
                if (dist[nextNode.idx] > temp.w + nextNode.w) {
                    dist[nextNode.idx] = temp.w + nextNode.w;
                    queue.add(new Node(nextNode.idx, dist[nextNode.idx]));
                }
            }
        }

    }

}
