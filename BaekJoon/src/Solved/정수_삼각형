package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 정수_삼각형 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;

        int n = Integer.parseInt(br.readLine());

        int dp[][] = new int[n][n];

        dp[0][0] = Integer.parseInt(br.readLine());

        for(int i=2; i<=n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j=0; j<i; j++)
                dp[i-1][j] = Integer.parseInt(st.nextToken());
        }

        for(int i=2; i<=n; i++){
            for(int j=0; j<i; j++){
                if(j==0){
                    dp[i-1][j] += dp[i-2][0];
                }
                else if(j == i-1){
                    dp[i-1][j] += dp[i-2][i-2];
                }
                else{
                    dp[i-1][j] = Math.max((dp[i-1][j] + dp[i-2][j-1]), (dp[i-1][j] + dp[i-2][j]));
                }
            }
        }

        int max = 0;
        for(int i=0; i<n; i++){
            max = Math.max(max, dp[n-1][i]);
        }

        System.out.println(max);
    }
}
