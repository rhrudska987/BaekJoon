package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 빙산 {

	static int N;
	static int M;
	static int[][] map;
	static boolean[][] visited;
	static int[] dx = {-1, 0, 1, 0};
	static int[] dy = {0, -1, 0, 1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());

		map = new int[N][M];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 0; j < M; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}

		int answer = 0;
		while (true) {
			answer++;

			//깊은 복사
			int[][] copyMap = new int[N][M];
			for (int i = 0; i < map.length; i++) {
				copyMap[i] = map[i].clone();
			}

			//바닷물 인접 높이 감소
			boolean meltCheck = true;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (copyMap[i][j] != 0) {
						copyMap[i][j] -= count(i, j);
						if (copyMap[i][j] < 0) {
							copyMap[i][j] = 0;
						}
						meltCheck = false;
					}
				}
			}

			//빙산이 모두 녹은 경우
			if (meltCheck) {
				System.out.println(0);
				break;
			}

			//얕은 복사
			map = copyMap;
			visited = new boolean[N][M];
			int chunkCnt = 0;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if (map[i][j] != 0 && !visited[i][j]) {
						visited[i][j] = true;
						dfs(i, j);
						chunkCnt++;
					}
				}
			}

			//빙산이 두 덩어리 이상으로 분리된 경우
			if (chunkCnt >= 2) {
				System.out.println(answer);
				break;
			}
		}

	}

	static int count(int y, int x) {
		int cnt = 0;
		for (int i = 0; i < 4; i++) {
			int nextY = y + dy[i];
			int nextX = x + dx[i];
			if (nextY < 0 || nextY >= N || nextX < 0 || nextX >= M || map[nextY][nextX] != 0) {
				continue;
			}
			cnt++;
		}
		return cnt;
	}

	static void dfs(int y, int x) {
		for (int i = 0; i < 4; i++) {
			int nextY = y + dy[i];
			int nextX = x + dx[i];
			if (nextY < 0 || nextY >= N || nextX < 0 || nextX >= M || visited[nextY][nextX] || map[nextY][nextX] == 0) {
				continue;
			}
			visited[nextY][nextX] = true;
			dfs(nextY, nextX);
		}
	}

}
