package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 감시_피하기 {

    static int N;
    static String[][] map;
    static boolean[][] visited;
    static boolean answer = false;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;

        N = Integer.parseInt(br.readLine());
        map = new String[N][N];
        visited = new boolean[N][N];
        for (int i=0; i<N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<N; j++) {
                map[i][j] = st.nextToken();
            }
        }

        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (map[i][j].equals("X")) {
                    visited[i][j] = true;
                    map[i][j] = "O";
                    dfs(1);
                    map[i][j] = "X";
                }
            }
        }

        if (answer) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }

    }

    static void dfs(int idx) {
        if (answer) {
            return ;
        }
        if (idx == 3) {
            checkTeacher();
            return;
        }

        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (map[i][j].equals("X")) {
                    map[i][j] = "O";
                    dfs(idx + 1);
                    map[i][j] = "X";
                }
            }
        }

    }

    static void checkTeacher() {
        boolean check = true;
        for (int i=0; i<N; i++) {
            for (int j=0; j<N; j++) {
                if (map[i][j].equals("T")) {
                    if (!checkRight(i, j + 1) || !checkLeft(i, j - 1) || !checkUp(i - 1, j) || !checkDown(i + 1, j)){
                        check = false;
                        break;
                    }
                }
            }
        }

        if(check) {
            answer = true;
        }
    }

    static boolean checkRight(int y, int x) {
        for (int i = x; i<N; i++) {
            if(map[y][i].equals("O"))
                return true;
            if(map[y][i].equals("S"))
                return false;
        }
        return true;
    }

    static boolean checkLeft(int y, int x) {
        for (int i = x; i>=0; i--) {
            if(map[y][i].equals("O"))
                return true;
            if(map[y][i].equals("S"))
                return false;
        }
        return true;
    }

    static boolean checkUp(int y, int x) {
        for (int i = y; i>=0; i--) {
            if(map[i][x].equals("O"))
                return true;
            if(map[i][x].equals("S"))
                return false;
        }
        return true;
    }

    static boolean checkDown(int y, int x) {
        for (int i = y; i<N; i++) {
            if(map[i][x].equals("O"))
                return true;
            if(map[i][x].equals("S"))
                return false;
        }
        return true;
    }

}
