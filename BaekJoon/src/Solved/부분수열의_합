package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 부분수열의_합 {

	static int N;
	static int S;
	static int nums[];
	static boolean visited[];
	static int totalCnt;
	static int answer = 0;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		S = Integer.parseInt(st.nextToken());
		visited = new boolean[N];
		nums = new int[N];
		st = new StringTokenizer(br.readLine());
		for (int i=0; i<N; i++) {
			nums[i] = Integer.parseInt(st.nextToken());
		}

		for (int i=1; i<=N; i++) {
			totalCnt = i;
			backTracking(0, 0, 0);
		}

		System.out.println(answer);
	}

	private static void backTracking(int cnt, int idx, int sum) {
		if (totalCnt == cnt) {
			if (sum == S) {
				answer++;
			}
			return;
		}

		for (int i=idx; i<N; i++) {
			if (visited[i]) {
				continue;
			}
			visited[i] = true;
			backTracking(cnt + 1, i+1, sum + nums[i]);
			visited[i] = false;
		}
	}

}
