package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class 숫자_카드 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st =  null;

        int N = Integer.parseInt(br.readLine());
        int cards[] = new int[N];

        st = new StringTokenizer(br.readLine());
        for(int i = 0; i<N; i++)
            cards[i] = Integer.parseInt(st.nextToken());
        Arrays.sort(cards);

        int M = Integer.parseInt(br.readLine());
        int answer[] = new int[M];

        StringBuilder sb = new StringBuilder();
        st = new StringTokenizer(br.readLine());
        for(int i=0; i<M; i++){
            int num = Integer.parseInt(st.nextToken());
            answer[i] = upper(cards, num) - lower(cards, num);
            sb.append(answer[i] + " ");
        }
        System.out.println(sb.toString());
    }

    static int upper(int[] cards, int num){
        int low = 0;
        int high = cards.length;

        while(low < high){
            int mid = (low + high)/2;
            if(cards[mid] <= num){
                low = mid+1;
            }
            else
                high = mid;

        }
        return low;
    }

    static int lower(int[] cards, int num){
        int low = 0;
        int high = cards.length;

        while(low < high){
            int mid = (low + high)/2;
            if(cards[mid] < num){
                low = mid+1;
            }
            else
                high = mid;

        }
        return low;
    }
}
