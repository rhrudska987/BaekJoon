package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class ÌÅê2 {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        StringBuilder sb = new StringBuilder();
        int N = Integer.parseInt(br.readLine());

        Queue queue = new Queue();
        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            String command = st.nextToken();
            switch (command) {
                case "push":
                    int x = Integer.parseInt(st.nextToken());
                    queue.push(x);
                    break;
                case "pop":
                    sb.append(queue.pop() + "\n");
                    break;
                case "size":
                    sb.append(queue.size() + "\n");
                    break;
                case "empty":
                    sb.append(queue.empty() + "\n");
                    break;
                case "front":
                    sb.append(queue.front() + "\n");
                    break;
                case "back":
                    sb.append(queue.back() + "\n");
                    break;
            }
        }
        if(sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }
        System.out.println(sb);
    }

    static class Queue {
        int front, rear;
        int[] queueArray;

        public Queue() {
            front = 0;
            rear = 0;
            queueArray = new int[2000001];
        }

        public void push(int x) {
            queueArray[rear] = x;
            rear++;
        }

        public int pop() {
            if (front == rear) {
                return -1;
            }
            return queueArray[front++];
        }

        public int size() {
            return rear - front;
        }

        public int empty() {
            if (front == rear) {
                return 1;
            }
            return 0;
        }

        public int front() {
            if (front == rear) {
                return -1;
            }
            return queueArray[front];
        }

        public int back() {
            if (front == rear) {
                return -1;
            }
            return queueArray[rear - 1];
        }

    }

}
