package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class 단지번호붙이기 {

    static int map[][];
    static int visited[][];
    static int N;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());

        map = new int[N][N];
        visited = new int[N][N];
        for (int i=0; i<N; i++){
            String[] str = br.readLine().split("");
            for(int j=0; j<N; j++)
                map[i][j] = Integer.parseInt(str[j]);
        }

        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(map[i][j] == 1 && visited[i][j] == 0){
                    visited[i][j] = 1;
                    list.add(BFS(i, j));
                }
            }
        }

        Collections.sort(list);
        System.out.println(list.size());
        for (int i=0; i<list.size(); i++){
            System.out.println(list.get(i));
        }
    }

    static int BFS(int x, int y){
        Queue<int []> queue = new LinkedList<>();
        queue.add(new int[]{x,y});
        int cntApt = 1;

        while(queue.size() > 0){
            int point[] = queue.poll();
            if(point[0]+1 < N && map[point[0]+1][point[1]] == 1 && visited[point[0]+1][point[1]] == 0){
                queue.add(new int[]{point[0]+1, point[1]});
                visited[point[0] +  1][point[1]] = 1;
                cntApt++;
            }
            if(point[0]-1 >= 0 && map[point[0]-1][point[1]] == 1 && visited[point[0]-1][point[1]] == 0){
                queue.add(new int[]{point[0] - 1, point[1]});
                visited[point[0] -  1][point[1]] = 1;
                cntApt++;
            }
            if(point[1]+1 < N && map[point[0]][point[1]+1] == 1 && visited[point[0]][point[1]+1] == 0){
                queue.add(new int[]{point[0], point[1]+1});
                visited[point[0]][point[1]+1] = 1;
                cntApt++;
            }
            if(point[1]-1 >= 0 && map[point[0]][point[1]-1] == 1 && visited[point[0]][point[1]-1] == 0){
                queue.add(new int[]{point[0], point[1]-1});
                visited[point[0]][point[1]-1] = 1;
                cntApt++;
            }
        }
        return cntApt;
    }
}
