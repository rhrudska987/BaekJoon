package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 스티커 {

    static int n;
    static int[][] score;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = null;
        int T = Integer.parseInt(br.readLine());
        int answer[] = new int[T];

        int idx = 0;
        while(idx < T){
            n = Integer.parseInt(br.readLine());
            score = new int[2][n];
            for (int i=0; i<2; i++){
                st = new StringTokenizer(br.readLine());
                for (int j=0; j<n; j++){
                    score[i][j] = Integer.parseInt(st.nextToken());
                }
            }
            answer[idx] = dp();
            idx++;
        }
        for (int i=0; i<T; i++)
            System.out.println(answer[i]);
    }

    static int dp(){
        int bigNum = 0;
        for(int i=1; i<n; i++){
            score[0][i] = Math.max(bigNum + score[0][i], score[1][i-1] + score[0][i]);
            score[1][i] = Math.max(bigNum + score[1][i], score[0][i-1] + score[1][i]);
            bigNum = (score[0][i-1] > score[1][i-1]) ? score[0][i-1] : score[1][i-1];
        }

        for(int i=0; i<n; i++){
            if(score[0][i] > bigNum)
                bigNum = score[0][i];
            if(score[1][i] > bigNum)
                bigNum = score[1][i];
        }
        return bigNum;
    }
}
