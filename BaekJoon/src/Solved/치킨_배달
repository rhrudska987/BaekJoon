package DynamicProgramming;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

class Point {
    int x;
    int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

public class 치킨_배달 {

    static int N;
    static int M;
    static int[][] city;
    static int answer = Integer.MAX_VALUE;
    static ArrayList<Point> chicken = new ArrayList<>();
    static ArrayList<Point> house = new ArrayList<>();
    static boolean[] visited;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        city = new int[N][N];

        for (int i=0; i<N; i++){
            st = new StringTokenizer(br.readLine());
            for (int j=0; j<N; j++) {
                city[i][j] = Integer.parseInt(st.nextToken());
                if(city[i][j] == 2)
                    chicken.add(new Point(i, j));
                else if(city[i][j] == 1)
                    house.add(new Point(i, j));
            }
        }
        visited = new boolean[chicken.size()];
        backTracking(0,0);
        System.out.println(answer);
    }

    static void backTracking(int start, int cnt){
        if(cnt == M){
            int res = 0;
            for(int i=0; i<house.size(); i++){
                int tmp = Integer.MAX_VALUE;
                for(int j=0; j<chicken.size(); j++){
                    if(visited[j]){
                        int distance = Math.abs(house.get(i).x - chicken.get(j).x) + Math.abs(house.get(i).y - chicken.get(j).y);
                        tmp = Math.min(tmp, distance);
                    }
                }
                res += tmp;
            }
            answer = Math.min(answer, res);
            return;
        }
        for (int i=start; i<chicken.size(); i++){
            if(visited[i] == false) {
                visited[i] = true;
                backTracking(i + 1, cnt + 1);
                visited[i] = false;
            }
        }
    }
}
